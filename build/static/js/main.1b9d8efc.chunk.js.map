{"version":3,"sources":["components/Header.jsx","helpers.js","components/Formulario.jsx","components/Resumen.jsx","components/Resultado.jsx","components/Spinner.jsx","App.js","serviceWorker.js","index.js"],"names":["ContenedorHeader","styled","header","TextoHeader","h1","Header","titulo","primeraLetraMayuscula","texto","charAt","toUpperCase","slice","Campo","div","Label","label","Select","select","InputRadio","input","Boton","button","Error","Formulario","guardarResumen","guardarCargando","useState","marca","anio","plan","datos","guardarDatos","error","guardarError","obtenerInformacion","e","target","name","value","onSubmit","preventDefault","trim","year","resultado","diferencia","Date","getFullYear","incremento","calcularMarca","incrementoPlan","obtenerPlan","parseFloat","toFixed","setTimeout","cotizacion","Number","onChange","type","checked","ContenedorResumen","Resumen","ResultadoCotizacion","Mensaje","p","TextoCotizacion","Resultado","TransitionGroup","component","className","CSSTransition","classNames","key","timeout","enter","exit","Spinner","Contenedor","ContenedorFormulario","App","resumen","cargando","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b9d8efc.chunk.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst ContenedorHeader = styled.header`\n    background-color : #26C6DA;\n    padding: 10px;\n    font-weight: bold;\n    color: #FFFFFF;\n`\nconst TextoHeader = styled.h1`\n    font-size: 2rem;\n    margin:0;\n    font-family:'Slabo 27px', serif;\n    text-align: center;\n`\nconst Header = ({titulo}) => {\n    return ( <ContenedorHeader>\n        <TextoHeader>{titulo}</TextoHeader>\n    </ContenedorHeader> );\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n \nexport default Header;","//obtiene la diferencia de años\nexport const obtenerDiferenciaYear = (year) => {\n    return new Date().getFullYear() - year\n}\n\n//calcula el total a pagar según la marca\nexport const calcularMarca = (marca) => {\n    let incremento\n    switch (marca) {\n        case 'europeo':\n            incremento = 1.30\n            break\n        case 'americano':\n            incremento = 1.15\n            break\n        case 'asiatico':\n            incremento = 1.05\n            break\n        default:\n            break\n\n    }\n    return incremento\n}\n\n// calcula el tipo de seguro\nexport const obtenerPlan = (plan) => {\n    return (plan === 'basico') ? 1.20 : 1.50\n}\n\n// Muestra la primera letra mayuscula\n\nexport const primeraLetraMayuscula = (texto) => {\n    return texto.charAt(0).toUpperCase() + texto.slice(1)\n}","import React, {useState} from 'react'\nimport styled from '@emotion/styled'\nimport {obtenerDiferenciaYear, calcularMarca, obtenerPlan} from '../helpers'\nimport PropTypes from 'prop-types'\n\nconst Campo = styled.div`\n    display: flex;\n    margin-bottom:1rem;\n    align-items:center;\n`\nconst Label = styled.label`\n    flex: 0 0 100px;\n`\n\nconst Select = styled.select`\n    display:block;\n    width:100%;\n    padding:1rem;\n    border:1px solid #E1E1E1;\n    -webkit-appearance: none;\n`\n\nconst InputRadio = styled.input`\n    margin: 0 1rem;\n`\n\nconst Boton = styled.button`\n    background-color: #00838F;\n    font-size: 16px;\n    width: 100%;\n    padding: 1rem;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    border: none;\n    transition: background-color .3s ease;\n    margin-top: 2rem;\n\n    &:hover {\n        background-color: #26C6DA;\n        cursor: pointer\n    }\n`\nconst Error = styled.div`\n    background-color: red;\n    color: white;\n    padding: 1rem;\n    width: 100%;\n    text-align: center;\n    margin-bottom: 2rem;\n`\n\nconst Formulario = ({guardarResumen, guardarCargando}) => {\n\n    const [datos, guardarDatos] = useState({\n        marca: '',\n        anio: '',\n        plan: ''\n    })\n\n    const [error, guardarError] = useState(false)\n    //extraer los valores del state\n    const {marca, anio, plan} = datos\n\n    //leer datos del formulario y colocarlos en el state\n    const obtenerInformacion = e => {\n        guardarDatos({\n            ...datos,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const cotizarSeguro = e =>{\n        e.preventDefault()\n        //Verifica los campos\n        if(marca.trim() === '' || anio.trim() === '' || plan.trim() === ''){\n            guardarError(true)\n            return\n        }\n        //Pasa la validacion\n        guardarError(false)\n\n        //Una base de 2000\n        let resultado = 2000\n        //Obtener la diferencia de años\n        const diferencia = obtenerDiferenciaYear(anio);\n        //Por cada año hay que restar el 3%\n        resultado -= ((diferencia * 3) * resultado) / 100\n\n        //Americano 15% de incremento a su valor actual\n        //Asiatico 5%\n        //Europeo 30%\n        resultado = calcularMarca(marca) * resultado\n        //Básico 20% incrementa el valor\n        //Completo 50%\n        const incrementoPlan = obtenerPlan(plan)\n        resultado = parseFloat(incrementoPlan * resultado).toFixed(2)\n        //muestra el spinner\n        guardarCargando(true)\n        \n        setTimeout(() => {\n            //elimina el spinner despues de 3 segundos\n            guardarCargando(false)\n            //muestra los resultados\n            guardarResumen({\n                cotizacion: Number(resultado),\n                datos\n            })\n\n        }, 3000);\n\n    }\n\n    return ( \n        <form\n            onSubmit={cotizarSeguro}\n        >   \n         {error ? <Error>Todos los campos son obligatorios</Error> : null}\n            <Campo>\n                <Label>Marca</Label>\n                <Select\n                    name=\"marca\"\n                    value={marca}\n                    onChange={obtenerInformacion}\n                >\n                    <option value=\"\">Seleccione</option>\n                    <option value=\"americano\">Americano</option>\n                    <option value=\"europeo\">Europeo</option>\n                    <option value=\"asiatico\">Asiatico</option>\n                </Select>\n            </Campo>\n            <Campo>\n                <Label>Año</Label>\n                <Select\n                    name=\"anio\"\n                    value={anio}\n                    onChange={obtenerInformacion}\n                >\n                    <option value=\"\">Seleccione</option>\n                    <option value=\"2021\">2021</option>\n                    <option value=\"2020\">2020</option>\n                    <option value=\"2019\">2019</option>\n                    <option value=\"2018\">2018</option>\n                    <option value=\"2017\">2017</option>\n                    <option value=\"2016\">2016</option>\n                    <option value=\"2015\">2015</option>\n                    <option value=\"2014\">2014</option>\n                    <option value=\"2013\">2013</option>\n                    <option value=\"2012\">2012</option>\n                </Select>\n            </Campo>\n            <Campo>\n                <Label>Plan</Label>\n                <InputRadio\n                    type=\"radio\"\n                    name=\"plan\"\n                    value=\"basico\" \n                    checked={plan === \"basico\"}\n                    onChange={obtenerInformacion}\n                /> Básico\n                <InputRadio\n                    type=\"radio\"\n                    name=\"plan\"\n                    value=\"completo\" \n                    checked={plan === \"completo\"}\n                    onChange={obtenerInformacion}\n                /> Completo\n            </Campo>\n            <Boton type=\"submit\">Cotizar</Boton>\n        </form>\n\n     );\n}\n\nFormulario.propTypes = {\n    guardarResumen: PropTypes.func.isRequired,\n    guardarCargando: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react'\nimport {primeraLetraMayuscula} from '../helpers'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst ContenedorResumen = styled.div`\n    padding: 1rem;\n    text-align: center;\n    background-color: #00838F;\n    color: #FFFFFF;\n    margin-top: 1rem;\n`\n\nconst Resumen = ({datos}) => {\n\n    const {marca, anio, plan} = datos\n    //No llega al return del renderizado al devolver null\n    if (marca === '' || anio === '' || plan === '')\n    return null\n\n    return ( \n        <ContenedorResumen>\n            <h2>Resumen de cotización</h2>\n            <ul>\n                <li>Marca: {primeraLetraMayuscula(marca)}</li>\n                <li>Año: {anio}</li>\n                <li>Plan: {primeraLetraMayuscula(plan)}</li>\n            </ul>\n        </ContenedorResumen>\n\n     );\n}\n\nResumen.propTypes = {\n    datos: PropTypes.object.isRequired\n}\n\nexport default Resumen;","import React from 'react'\nimport styled from '@emotion/styled'\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\nimport PropTypes from 'prop-types'\n\nconst ResultadoCotizacion = styled.div`\n    text-align: center;\n    padding: .5rem;\n    border: 1px solid #26C6DA;\n    background-color: rgb(127, 224, 237);\n    margin-top: 1rem;\n    position:relative;\n`\n\nconst Mensaje = styled.p`\n    background-color: rgb(127, 224, 237);\n    margin-top: 2rem;\n    padding: 1rem;\n    text-align: center;\n`\nconst TextoCotizacion = styled.p`\n    color: #00838F;\n    padding: 1rem;\n    text-transform: uppercase;\n    font-weight: bold;\n    margin: 0;\n`\n\nconst Resultado = ({cotizacion}) => {\n\n    return ( \n        (cotizacion === 0) \n            ? <Mensaje>Elige marca, año y tipo de seguro</Mensaje> \n            : (\n                <ResultadoCotizacion>\n                    <TransitionGroup\n                        component=\"span\"\n                        className=\"resultado\"\n                    >\n                        <CSSTransition\n                            classNames=\"resultado\"\n                            key={cotizacion}\n                            timeout={{enter: 500, exit: 500}}\n                        >\n                            <TextoCotizacion>El total es: <span>${cotizacion}</span></TextoCotizacion>\n                        </CSSTransition>\n                    </TransitionGroup>\n                </ResultadoCotizacion>\n               )\n     )\n}\n\nResultado.propTypes = {\n    cotizacion: PropTypes.number.isRequired\n}\n \nexport default Resultado;","import React from 'react';\nimport './Spinner.css'\n\nconst Spinner = () => {\n    return ( <div className=\"spinner\"></div> );\n}\n \nexport default Spinner;","import React, {useState, Fragment} from 'react';\nimport Header from './components/Header'\nimport Formulario from './components/Formulario'\nimport Resumen from './components/Resumen'\nimport Resultado from './components/Resultado'\nimport Spinner from './components/Spinner'\n\nimport styled from '@emotion/styled'\n\nconst Contenedor = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n`\n\nconst ContenedorFormulario = styled.div`\n  background-color: #FFF;\n  padding: 3rem;\n\n`\nfunction App() {\n\n  const [resumen, guardarResumen ] = useState({\n    cotizacion: 0,\n    datos: {\n      marca: '',\n      anio: '',\n      plan: ''\n    }\n  })\n\n  const [cargando, guardarCargando] = useState(false)\n\n  const {cotizacion, datos} = resumen\n\n  return (\n    <Contenedor>\n      <Header \n          titulo='Cotizador de Seguros'\n          />\n      <ContenedorFormulario>\n        <Formulario\n          guardarResumen = {guardarResumen}\n          guardarCargando = {guardarCargando}\n        />\n       \n       \n       {cargando \n          ? <Spinner /> \n          : <Fragment>\n              <Resumen datos={datos}/>\n              <Resultado cotizacion = {cotizacion}/>\n            </Fragment>\n       }\n\n       \n      </ContenedorFormulario>\n    </Contenedor>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}